{
    "patches": [
        {
            "label": "2025-09-16_20-03-06",
            "content": "@@ -1,227 +1,28 @@\n-class Towel:%0A    def __init__(self):%0A        self.color =%22pink%22%0A        self.size = %22m%22%0A        self.wetness =0%0A%0Atowel= Towel()%0Aprint(towel.color)%0Atowel.color = %22red%22%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)%0A%0A%0A\n+print(%22minha toalha %C3%A9 rosa%22)\n",
            "lines": "1"
        },
        {
            "label": "2025-09-16_20-12-44",
<<<<<<< HEAD
            "content": "@@ -9,17 +9,8 @@\n wel:\n-    #this\n %0A   \n@@ -31,91 +31,37 @@\n self\n-, color: str, size: str): # constructor%0A        self.color: str = color # atributos\n+):%0A        self.color =%22pink%22\n %0A   \n@@ -78,20 +78,14 @@\n size\n-: str = size\n+ = %22m%22\n %0A   \n@@ -105,1302 +105,123 @@\n ness\n-: int\n  =\n- \n 0%0A%0A\n-    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            \n+towel= Towel()%0A\n print(\n-%22\n to\n-alha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A    %0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Cor:%7Bs\n+wel.color)%0Atow\n el\n-f\n .color\n-%7D, Tam:%7Bself.size%7D, Umidade:%7Bself.wetness%7D%22%0A %0A%0A%0A%0Adef main():#2%0A    toalha =Towel (%22%22, %22%22) #3 objeto manipulado%0A    while True:# 4 loop infinito %0A        line: str = input() #entrada de linha%0A        args: list%5Bstr%5D= line.split (%22 %22)%0A        if args %5B0%5D==%22end%22:%0A            break%0A        elif args %5B0%5D ==%22new%22: # color size%0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel (color,size)%0A        elif args%5B0%5D==%22show%22:%0A            print(toalha)%0A        elif args %5B0%5D== %22dry%22:# amount%0A            amount: int = int (args%5B1%5D)%0A            toalha.dry (amount)%0A        else:%0A            print(%22fail:comando invalido%22)%0A%0A%0Amain() #1           %0A%0A%0A%0A%0A%0A \n+ = %22red%22%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n %0A%0A%0A\n",
            "lines": "14"
        },
        {
            "label": "2025-09-22_20-00-01",
            "content": "class Towel:    #this\n    def __init__(self, color: str, size: str): # constructor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n\n    def isDry(self) -> bool:\n        return self.wetness == 0\n    \n    def wringOut(self) -> None:\n        self.wetness = 0\n\n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self) -> str: # toString\n        return f\"Cor:{self.color}, Tam:{self.size}, Umidade:{self.wetness}\"\n \n\n\n\ndef main():#2\n    toalha =Towel (\"\", \"\") #3 objeto manipulado\n    while True:# 4 loop infinito \n        line: str = input() #entrada de linha\n        args: list[str]= line.split (\" \")\n        if args [0]==\"end\":\n            break\n        elif args [0] ==\"new\": # color size\n            color = args[1]\n            size = args[2]\n            toalha = Towel (color,size)\n        elif args[0]==\"show\":\n            print(toalha)\n        elif args [0]== \"dry\":# amount\n            amount: int = int (args[1])\n            toalha.dry (amount)\n        else:\n            print(\"fail:comando invalido\")\n\n\nmain() #1           \n\n\n\n\n\n \n\n\n",
            "lines": "62"
=======
            "content": "@@ -108,109 +108,8 @@\n s =0\n-%0A    def __str__(self):%0A        return f%22color:%7Bself.color%7D, tam:%7Bself.size%7D, hum:%7Bself.wetness%7D%22    \n %0A%0Ato\n",
            "lines": "14"
        },
        {
            "label": "2025-09-19_13-40-06",
            "content": "@@ -55,12 +55,11 @@\n r =%22\n-blac\n+pin\n k%22%0A \n@@ -78,17 +78,17 @@\n size = %22\n-p\n+m\n %22%0A      \n@@ -260,14 +260,11 @@\n  = %22\n-yellow\n+red\n %22%0Apr\n",
            "lines": "16"
        },
        {
            "label": "2025-09-19_13-55-28",
            "content": "class Towel:\n    def __init__(self):\n        self.color =\"black\"\n        self.size = \"p\"\n        self.wetness =0\n    def __str__(self):\n        return f\"color:{self.color}, tam:{self.size}, hum:{self.wetness}\"    \n\ntowel= Towel()\nprint(towel.color)\ntowel.color = \"yellow\"\nprint(towel.color)\nprint(towel.size)\nprint(towel.wetness)\n\n\n",
            "lines": "16"
>>>>>>> 7a3d6ba5f6c2f28cabc5701885473ffbc3b0afcf
        }
    ]
}